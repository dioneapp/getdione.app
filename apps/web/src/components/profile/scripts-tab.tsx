"use client";

import { AnimatePresence, motion } from "framer-motion";
import { Check, Pencil, Plus, X as XIcon } from "lucide-react";
import { useEffect, useMemo, useState } from "react";
import { supabase } from "@/utils/database";
import useUser from "@/utils/use-user";

type UserScript = {
  id: string;
  name: string;
  description: string;
  script_url: string;
  logo_url?: string;
  version: string;
  tags?: string;
  commit_hash: string;
  author?: string;
  author_url?: string;
  pending_review?: boolean;
  status?: string | null;
  review_feedback?: string | null;
  created_at?: string;
  updated_at?: string;
};

// new script input (id is generated by db)
type NewScriptInput = {
  name: string;
  description: string;
  script_url: string;
  logo_url: string;
  version: string;
  tags: "audio" | "image" | "video" | "chat" | "";
  commit_hash: string;
};

function validateCommitHash(hash: string) {
  return /^[0-9a-fA-F]{7,40}$/.test(hash);
}

function validateGitHubUrl(url: string) {
  return /^https:\/\/github\.com\/[^\/]+\/[^\/]+\/.*\.json$/i.test(url);
}

export default function ProfileScriptsTab() {
  const { user, loading: userLoading } = useUser();
  const [scripts, setScripts] = useState<UserScript[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [expandedScript, setExpandedScript] = useState<string | null>(null);
  const [editingScriptId, setEditingScriptId] = useState<string | null>(null);
  const [editedScript, setEditedScript] = useState<UserScript | null>(null);
  const [showNewModal, setShowNewModal] = useState(false);
  const [creating, setCreating] = useState(false);

  // new script form state
  const [newScript, setNewScript] = useState<NewScriptInput>({
    name: "",
    description: "",
    script_url: "",
    logo_url: "",
    version: "",
    tags: "",
    commit_hash: "",
  });
  const [newErrors, setNewErrors] = useState<Record<string, string>>({});

  const filteredScripts = useMemo(() => {
    if (!searchQuery) return scripts;
    const q = searchQuery.toLowerCase();
    return scripts.filter(
      (s) =>
        s.name?.toLowerCase().includes(q) ||
        s.description?.toLowerCase().includes(q) ||
        s.tags?.toLowerCase().includes(q) ||
        s.version?.toLowerCase().includes(q),
    );
  }, [scripts, searchQuery]);

  useEffect(() => {
    if (userLoading) return;
    if (!user?.username) return;
    let cancelled = false;

    async function fetchMyScripts() {
      try {
        setLoading(true);
        setError(null);
        const { data, error } = await supabase
          .from("scripts")
          .select("*")
          .eq("author", user.username)
          .order("created_at", { ascending: false });
        if (error) throw error;
        if (!cancelled) setScripts(data || []);
      } catch (err) {
        if (!cancelled)
          setError(
            err instanceof Error ? err.message : "failed to load scripts",
          );
      } finally {
        if (!cancelled) setLoading(false);
      }
    }

    fetchMyScripts();
    return () => {
      cancelled = true;
    };
  }, [user, userLoading]);

  const startEditing = (s: UserScript) => {
    setEditingScriptId(s.id);
    setEditedScript({ ...s });
    setExpandedScript(s.id);
  };

  const cancelEditing = () => {
    setEditingScriptId(null);
    setEditedScript(null);
  };

  const saveEdits = async () => {
    if (!editedScript) return;
    // basic validation
    const errs: Record<string, string> = {};
    if (!editedScript.name?.trim()) errs.name = "required";
    if (!editedScript.description?.trim()) errs.description = "required";
    if (!editedScript.script_url?.trim()) errs.script_url = "required";
    if (!editedScript.version?.trim()) errs.version = "required";
    if (!editedScript.commit_hash?.trim()) errs.commit_hash = "required";
    if (editedScript.commit_hash && !validateCommitHash(editedScript.commit_hash)) {
      errs.commit_hash = "invalid hash";
    }

    if (Object.keys(errs).length) {
      setError("please fix the highlighted fields");
      return;
    }

    try {
      setError(null);
      const updateData: Partial<UserScript> = {
        name: editedScript.name,
        description: editedScript.description,
        script_url: editedScript.script_url,
        logo_url: editedScript.logo_url || undefined,
        version: editedScript.version,
        tags: editedScript.tags || undefined,
        commit_hash: editedScript.commit_hash,
        // re-open review on edit
        pending_review: true,
        status: "PENDING_REVIEW",
      };

      const { error } = await supabase
        .from("scripts")
        .update(updateData)
        .eq("id", editedScript.id);
      if (error) throw error;

      setScripts((prev) =>
        prev.map((s) => (s.id === editedScript.id ? { ...s, ...updateData } : s)),
      );
      cancelEditing();
    } catch (err) {
      setError(err instanceof Error ? err.message : "failed to save");
    }
  };

  const openNewModal = () => {
    setNewScript({
      name: "",
      description: "",
      script_url: "",
      logo_url: "",
      version: "1.0.0",
      tags: "",
      commit_hash: "",
    });
    setNewErrors({});
    setShowNewModal(true);
  };

  const submitNew = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;

    const errs: Record<string, string> = {};
    if (!newScript.name?.trim()) errs.name = "required";
    if (newScript.name && newScript.name.length > 50) errs.name = "max 50 characters";
    if (!newScript.description?.trim()) errs.description = "required";
    if (newScript.description && newScript.description.length > 200) errs.description = "max 200 characters";
    if (!newScript.script_url?.trim()) errs.script_url = "required";
    if (newScript.script_url && !validateGitHubUrl(newScript.script_url)) {
      errs.script_url = "must be a valid GitHub URL ending in .json";
    }
    if (!newScript.logo_url?.trim()) errs.logo_url = "required";
    if (!newScript.version?.trim()) errs.version = "required";
    if (!newScript.tags) errs.tags = "required";
    if (!newScript.commit_hash?.trim()) errs.commit_hash = "required";
    if (newScript.commit_hash && !validateCommitHash(newScript.commit_hash)) {
      errs.commit_hash = "invalid hash";
    }

    setNewErrors(errs);
    if (Object.keys(errs).length) return;

    try {
      setCreating(true);
      const author = user.username || user.first_name || "anonymous";
      const authorUrl = `${window.location.origin}/profile/${user.username}`;
      const generatedId =
        typeof crypto !== "undefined" && "randomUUID" in crypto
          ? (crypto as any).randomUUID()
          : Math.random().toString(36).slice(2);
      const { error } = await supabase.from("scripts").insert({
        id: generatedId,
        name: newScript.name,
        description: newScript.description,
        script_url: newScript.script_url,
        logo_url: newScript.logo_url,
        version: newScript.version,
        tags: newScript.tags,
        commit_hash: newScript.commit_hash,
        author,
        author_url: authorUrl,
        likes: 0,
        downloads: 0,
        featured: false,
        official: false,
        pending_review: true,
        status: "PENDING_REVIEW",
      });
      if (error) throw error;

      // refresh list
      const { data } = await supabase
        .from("scripts")
        .select("*")
        .eq("author", author)
        .order("created_at", { ascending: false });
      setScripts(data || []);
      setShowNewModal(false);
    } catch (err) {
      const e = err as any;
      console.error("submit script error:", e);
      const msg = e?.message?.toLowerCase?.() || "";
      if (msg.includes("row-level security") || e?.code === "42501") {
        setError("permission denied. please sign in or contact support");
      } else if (e?.code === "23505") {
        setError("duplicate. try again");
      } else if (e?.code === "23502") {
        setError("missing required field");
      } else {
        setError(e?.message || e?.hint || "submission failed. check fields and auth");
      }
    } finally {
      setCreating(false);
    }
  };

  return (
    <div className="w-full">
      <div className="mb-6 flex flex-col gap-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <input
            type="text"
            placeholder="search your scripts..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="flex-1 px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/40"
          />
          <button
            onClick={openNewModal}
            className="w-full sm:w-auto shrink-0 py-2 px-4 flex items-center justify-center gap-2 rounded-full bg-white font-semibold text-[#080808] cursor-pointer hover:bg-white/90 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-white/50 shadow-lg border border-black/10"
          >
            <Plus className="w-4 h-4" />
            Submit Script
          </button>
        </div>
        {error && (
          <div className="text-sm text-red-400/90 bg-red-500/10 border border-red-400/30 rounded-lg px-4 py-2">
            {error}
          </div>
        )}
      </div>

      {loading ? (
        <div className="text-white/60">loading...</div>
      ) : (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="space-y-4">
          {filteredScripts.map((script) => (
            <motion.div
              key={script.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white/5 rounded-lg border border-white/10 overflow-hidden"
            >
              <div
                className="p-4 cursor-pointer hover:bg-white/5 transition-colors"
                onClick={() =>
                  setExpandedScript(expandedScript === script.id ? null : script.id)
                }
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="relative w-12 h-12 rounded-lg overflow-hidden border-2 border-white/20 flex-shrink-0">
                      {script?.logo_url ? (
                        // eslint-disable-next-line @next/next/no-img-element
                        <img src={script.logo_url} alt={script.name} className="object-cover h-full w-full" />
                      ) : (
                        <div className="w-full h-full bg-white/10 flex items-center justify-center">
                          <span className="text-white/50 text-xl">
                            {script?.name?.[0]?.toUpperCase() || "?"}
                          </span>
                        </div>
                      )}
                    </div>
                    <div>
                      <h3 className="text-lg font-medium text-white truncate">{script.name}</h3>
                      <p className="text-white/60 text-sm line-clamp-1">{script.description}</p>
                      <div className="text-xs text-white/50 mt-1 flex gap-2 flex-wrap">
                        <span>version {script.version}</span>
                        {script.tags && <span>• {script.tags}</span>}
                        {script.pending_review ? (
                          <span className="text-yellow-300/80">• pending review</span>
                        ) : script.status ? (
                          <span className="text-white/70">• {script.status.toLowerCase()}</span>
                        ) : null}
                      </div>
                    </div>
                  </div>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      startEditing(script);
                    }}
                    className="px-3 py-1.5 bg-white/5 hover:bg-white/10 rounded-lg text-white/80 hover:text-white transition-all duration-200 flex items-center gap-2 cursor-pointer"
                  >
                    <Pencil className="w-4 h-4" />
                    Edit
                  </button>
                </div>
              </div>

              <AnimatePresence>
                {expandedScript === script.id && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: "auto", opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                    className="border-t border-white/10"
                  >
                    <div className="p-4 space-y-4">
                      {script.review_feedback && (
                        <div className="text-sm text-white/70 bg-white/5 border border-white/10 rounded-lg p-3">
                          <span className="text-white/60">moderator feedback:</span> {script.review_feedback}
                        </div>
                      )}

                      {editingScriptId === script.id ? (
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm text-white/60 mb-1">Name</label>
                            <input
                              type="text"
                              value={editedScript?.name || ""}
                              onChange={(e) =>
                                setEditedScript((prev) => (prev ? { ...prev, name: e.target.value } : prev))
                              }
                              className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                            />
                          </div>
                          <div>
                            <label className="block text-sm text-white/60 mb-1">Version</label>
                            <input
                              type="text"
                              value={editedScript?.version || ""}
                              onChange={(e) =>
                                setEditedScript((prev) => (prev ? { ...prev, version: e.target.value } : prev))
                              }
                              className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                            />
                          </div>
                          <div className="sm:col-span-2">
                            <label className="block text-sm text-white/60 mb-1">Description</label>
                            <textarea
                              rows={3}
                              value={editedScript?.description || ""}
                              onChange={(e) =>
                                setEditedScript((prev) => (prev ? { ...prev, description: e.target.value } : prev))
                              }
                              className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                            />
                          </div>
                          <div>
                            <label className="block text-sm text-white/60 mb-1">Script URL</label>
                            <input
                              type="url"
                              value={editedScript?.script_url || ""}
                              onChange={(e) =>
                                setEditedScript((prev) => (prev ? { ...prev, script_url: e.target.value } : prev))
                              }
                              className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                            />
                          </div>
                          <div>
                            <label className="block text-sm text-white/60 mb-1">Logo URL</label>
                            <input
                              type="url"
                              value={editedScript?.logo_url || ""}
                              onChange={(e) =>
                                setEditedScript((prev) => (prev ? { ...prev, logo_url: e.target.value } : prev))
                              }
                              className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                            />
                          </div>
                          <div>
                            <label className="block text-sm text-white/60 mb-1">Tags</label>
                            <input
                              type="text"
                              value={editedScript?.tags || ""}
                              onChange={(e) =>
                                setEditedScript((prev) => (prev ? { ...prev, tags: e.target.value } : prev))
                              }
                              className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                            />
                          </div>
                          <div>
                            <label className="block text-sm text-white/60 mb-1">Commit hash</label>
                            <input
                              type="text"
                              value={editedScript?.commit_hash || ""}
                              onChange={(e) =>
                                setEditedScript((prev) => (prev ? { ...prev, commit_hash: e.target.value } : prev))
                              }
                              className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                              placeholder="e.g. 7-40 hex chars"
                            />
                          </div>
                        </div>
                      ) : (
                        <div className="text-white/70 text-sm">commit: {script.commit_hash}</div>
                      )}

                      <div className="flex flex-col sm:flex-row justify-end gap-3 mt-2">
                        {editingScriptId === script.id ? (
                          <>
                            <button
                              onClick={cancelEditing}
                              className="w-full sm:w-auto px-4 py-3 hover:text-white/70 rounded-lg text-white/80 transition-all duration-200 flex items-center justify-center gap-2 cursor-pointer"
                            >
                              Cancel
                            </button>
                            <button
                              onClick={saveEdits}
                              className="w-full sm:w-auto shrink-0 py-2 px-4 flex items-center justify-center gap-2 rounded-full bg-white font-semibold text-[#080808] cursor-pointer hover:bg-white/90 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-white/50 shadow-lg border border-black/10"
                            >
                              <Check className="w-4 h-4" /> Save changes for review
                            </button>
                          </>
                        ) : (
                          <div className="text-white/50 text-sm">last updated: {script.updated_at?.slice(0, 10) || script.created_at?.slice(0, 10) || "n/a"}</div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          ))}
          {!filteredScripts.length && (
            <div className="text-white/60 text-sm">No scripts yet. Submit your first one.</div>
          )}
        </motion.div>
      )}

      {/* script modal */}
      {showNewModal && (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-[#0b0b0b] border border-white/10 rounded-xl p-6 max-w-lg w-full mx-auto shadow-2xl">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-white text-xl font-semibold">Submit Script</h3>
              <button
                onClick={() => setShowNewModal(false)}
                className="p-2 text-white/70 hover:text-white cursor-pointer"
              >
                <XIcon className="w-5 h-5" />
              </button>
            </div>

            <form onSubmit={submitNew} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-white mb-2">Name</label>
                <input
                  type="text"
                  value={newScript.name}
                  onChange={(e) => setNewScript((p) => ({ ...p, name: e.target.value }))}
                  required
                  maxLength={50}
                  className={`w-full px-4 py-2 bg-white/10 border ${newErrors.name ? "border-red-500/50" : "border-white/20"} rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50`}
                  placeholder="Script name (max 50 chars)"
                />
                <div className="text-xs text-white/40 mt-1">{newScript.name.length}/50</div>
              </div>
              <div>
                <label className="block text-sm font-medium text-white mb-2">Description</label>
                <textarea
                  rows={3}
                  value={newScript.description}
                  onChange={(e) => setNewScript((p) => ({ ...p, description: e.target.value }))}
                  required
                  maxLength={200}
                  className={`w-full px-4 py-2 bg-white/10 border ${newErrors.description ? "border-red-500/50" : "border-white/20"} rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50`}
                  placeholder="Short description (max 200 chars)"
                />
                <div className="text-xs text-white/40 mt-1">{newScript.description.length}/200</div>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-white mb-2">Script URL</label>
                  <input
                    type="url"
                    value={newScript.script_url}
                    onChange={(e) => setNewScript((p) => ({ ...p, script_url: e.target.value }))}
                    required
                    className={`w-full px-4 py-2 bg-white/10 border ${newErrors.script_url ? "border-red-500/50" : "border-white/20"} rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50`}
                    placeholder="https://github.com/user/repo/blob/main/script.json"
                  />
                  {newScript.script_url && !validateGitHubUrl(newScript.script_url) && (
                    <div className="text-red-400 text-xs mt-1">must be a valid GitHub URL ending in .json</div>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-white mb-2">Logo URL</label>
                  <input
                    type="url"
                    value={newScript.logo_url}
                    onChange={(e) => setNewScript((p) => ({ ...p, logo_url: e.target.value }))}
                    required
                    className={`w-full px-4 py-2 bg-white/10 border ${newErrors.logo_url ? "border-red-500/50" : "border-white/20"} rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50`}
                    placeholder="https://i.imgur.com/n2Djcw9.png"
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-white mb-2">Version</label>
                  <input
                    type="text"
                    value={newScript.version}
                    onChange={(e) => setNewScript((p) => ({ ...p, version: e.target.value }))}
                    required
                    className={`w-full px-4 py-2 bg-white/10 border ${newErrors.version ? "border-red-500/50" : "border-white/20"} rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50`}
                    placeholder="1.0.0"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-white mb-2">Category</label>
                  <select
                    value={newScript.tags}
                    onChange={(e) => setNewScript((p) => ({ ...p, tags: e.target.value as NewScriptInput["tags"] }))}
                    required
                    className={`w-full px-4 py-2 bg-white/10 border ${newErrors.tags ? "border-red-500/50" : "border-white/20"} rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-white/50`}
                  >
                    <option value="" className="bg-[#1a1a1a] text-white/80">Select one</option>
                    <option value="audio" className="bg-[#1a1a1a] text-white">Audio</option>
                    <option value="image" className="bg-[#1a1a1a] text-white">Image</option>
                    <option value="video" className="bg-[#1a1a1a] text-white">Video</option>
                    <option value="chat" className="bg-[#1a1a1a] text-white">Chat</option>
                  </select>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-white mb-2">Commit Hash</label>
                <input
                  type="text"
                  value={newScript.commit_hash}
                  onChange={(e) => setNewScript((p) => ({ ...p, commit_hash: e.target.value }))}
                  required
                  className={`w-full px-4 py-2 bg-white/10 border ${newErrors.commit_hash ? "border-red-500/50" : "border-white/20"} rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50`}
                  placeholder="7-40 char git commit"
                />
                <div className="text-xs text-white/60 mt-1">
                  This is the Git commit hash up to which we will verify your script. If you want to update your script later, you'll need to provide a new commit hash for us to verify.
                </div>
                {newScript.commit_hash && !validateCommitHash(newScript.commit_hash) && (
                  <div className="text-red-400 text-xs mt-1">invalid commit hash format</div>
                )}
              </div>

              <div className="flex items-center justify-end gap-3 pt-2">
                <button
                  type="button"
                  onClick={() => setShowNewModal(false)}
                  className="px-4 py-2 bg-white/10 text-white rounded-full hover:bg-white/20 cursor-pointer"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={creating}
                  className="shrink-0 py-2 px-4 flex items-center justify-center gap-2 rounded-full bg-white font-semibold text-[#080808] cursor-pointer hover:bg-white/90 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-white/50 shadow-lg border border-black/10 disabled:opacity-60"
                >
                  {creating ? "Submitting..." : "Submit for review"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}


